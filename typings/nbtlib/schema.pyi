"""
This type stub file was generated by pyright.
"""

from .tag import Compound

"""This module defines tools for creating tag schemas.

Exported items:
    schema         -- Helper function to define compound schemas
    CompoundSchema -- `Compound` subclass that enforces a tag schema
"""
__all__ = ["schema", "CompoundSchema"]
def schema(name, dct, *, strict=...): # -> Any:
    """Create a compound tag schema.

    This function is a short convenience function that makes it easy to
    subclass the base `CompoundSchema` class.

    The `name` argument is the name of the class and `dct` should be a
    dictionary containing the actual schema. The schema should map keys
    to tag types or other compound schemas.

    If the `strict` keyword only argument is set to True, interacting
    with keys that are not defined in the schema will raise a
    `TypeError`.
    """
    ...

class CompoundSchema(Compound):
    """Class that extends the base `Compound` tag by enforcing a schema.

    Defining a custom schema is really useful if you're dealing with
    recurring data structures. Subclassing the `CompoundSchema` class
    with your own schema will save you some typing by casting all the
    keys defined in the schema to the appropriate tag type.

    The class inherits from `Compound` and will cast values to the
    predefined tag types for all of the inherited mutating operations.

    Class attributes:
        schema -- Dictionary mapping keys to tag types or other schemas
        strict -- Boolean enabling strict schema validation
    """
    __slots__ = ...
    schema = ...
    strict = ...
    def __init__(self, *args, strict=..., **kwargs) -> None:
        ...
    
    def __setitem__(self, key, value): # -> None:
        ...
    
    def update(self, mapping, **kwargs): # -> None:
        ...
    
    def cast_item(self, key, value): # -> CompoundSchema:
        """Cast schema item to the appropriate tag type."""
        ...
    


