"""
This type stub file was generated by pyright.
"""

from contextlib import contextmanager

"""This module exposes utilities for serializing nbt tags to snbt.

Exported functions:
    serialize_tag -- Helper function that serializes nbt tags

Exported classes:
    Serializer -- Class that can turn nbt tags into their literal representation

Exported objects:
    STRING_QUOTES    -- Maps the two types of quote to each other
    ESCAPE_SEQUENCES -- Maps escape sequences to their substitution
    ESCAPE_SUBS      -- Maps substitutions to their escape sequence
"""
__all__ = ["serialize_tag", "STRING_QUOTES", "ESCAPE_SEQUENCES", "ESCAPE_SUBS", "Serializer"]
STRING_QUOTES = ...
QUOTE_REGEX = ...
ESCAPE_SEQUENCES = ...
ESCAPE_SUBS = ...
UNQUOTED_COMPOUND_KEY = ...
def serialize_tag(tag, *, indent=..., compact=..., quote=...): # -> Any:
    """Serialize an nbt tag to its literal representation."""
    ...

class Serializer:
    """Nbt tag serializer."""
    def __init__(self, *, indent=..., compact=..., quote=...) -> None:
        ...
    
    @contextmanager
    def depth(self): # -> Generator[None, Any, None]:
        """Increase the level of indentation by one."""
        ...
    
    def should_expand(self, tag): # -> bool:
        """Return whether the specified tag should be expanded."""
        ...
    
    def expand(self, separator, fmt): # -> tuple[str, Any]:
        """Return the expanded version of the separator and format string."""
        ...
    
    def escape_string(self, string): # -> str:
        """Return the escaped literal representation of an nbt string."""
        ...
    
    def stringify_compound_key(self, key): # -> str:
        """Escape the compound key if it can't be represented unquoted."""
        ...
    
    def serialize(self, tag): # -> Any:
        """Return the literal representation of a tag."""
        ...
    
    def serialize_numeric(self, tag):
        """Return the literal representation of a numeric tag."""
        ...
    
    def serialize_array(self, tag): # -> str:
        """Return the literal representation of an array tag."""
        ...
    
    def serialize_string(self, tag): # -> str:
        """Return the literal representation of a string tag."""
        ...
    
    def serialize_list(self, tag): # -> str:
        """Return the literal representation of a list tag."""
        ...
    
    def serialize_compound(self, tag): # -> str:
        """Return the literal representation of a compound tag."""
        ...
    


