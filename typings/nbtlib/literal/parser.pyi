"""
This type stub file was generated by pyright.
"""

"""This module exposes utilities for parsing snbt.

Exported functions:
    parse_nbt -- Helper function that parses nbt literals
    tokenize  -- Generator that lazily yields tokens from a string

Exported classes:
    Parser -- Class that can parse nbt tags from a literal token stream

Exported exceptions:
    InvalidLiteral -- Raised when parsing invalid nbt literals
"""
__all__ = ["parse_nbt", "InvalidLiteral", "tokenize", "Parser"]
ESCAPE_REGEX = ...
TOKENS = ...
TOKENS_REGEX = ...
NUMBER_SUFFIXES = ...
LITERAL_ALIASES = ...
class InvalidLiteral(ValueError):
    """Exception raised when parsing invalid nbt literals.

    The exception must be instantiated with two parameters. The first
    one needs to be a tuple representing the location of the error in
    the nbt string (start_index, end_index). The second argument is the
    actual error message.
    """
    def __str__(self) -> str:
        ...
    


def parse_nbt(literal): # -> Any:
    """Parse a literal nbt string and return the resulting tag."""
    ...

Token = ...
def tokenize(string): # -> Generator[Token, Any, None]:
    """Match and yield all the tokens of the input string."""
    ...

class Parser:
    """Nbt literal parser.

    The parser needs to be instantiated with a token stream as argument.
    Using the `parse` method will return the corresponding nbt tag.

    The parser will raise an InvalidLiteral exception if it encounters
    an invalid nbt literal while parsing.
    """
    def __init__(self, token_stream) -> None:
        ...
    
    def error(self, message): # -> InvalidLiteral:
        """Create an InvalidLiteral using the current token position."""
        ...
    
    def next(self): # -> Self:
        """Move to the next token in the token stream."""
        ...
    
    def parse(self): # -> Any:
        """Parse and return an nbt literal from the token stream."""
        ...
    
    def parse_quoted_string(self): # -> String:
        """Parse a quoted string from the token stream."""
        ...
    
    def parse_number(self): # -> Double | Int | String:
        """Parse a number from the token stream."""
        ...
    
    def parse_string(self): # -> Byte | String:
        """Parse a regular unquoted string from the token stream."""
        ...
    
    def collect_tokens_until(self, token_type): # -> Generator[Any | None, Any, None]:
        """Yield the item tokens in a comma-separated tag collection."""
        ...
    
    def parse_compound(self): # -> Compound:
        """Parse a compound from the token stream."""
        ...
    
    def array_items(self, number_type, *, number_suffix=...): # -> Generator[int, Any, None]:
        """Parse and yield array items from the token stream."""
        ...
    
    def parse_byte_array(self): # -> ByteArray:
        """Parse a byte array from the token stream."""
        ...
    
    def parse_int_array(self): # -> IntArray:
        """Parse an int array from the token stream."""
        ...
    
    def parse_long_array(self): # -> LongArray:
        """Parse a long array from the token stream."""
        ...
    
    def parse_list(self): # -> List:
        """Parse a list from the token stream."""
        ...
    
    def parse_invalid(self):
        """Parse an invalid token from the token stream."""
        ...
    
    def unquote_string(self, string):
        """Return the unquoted value of a quoted string."""
        ...
    


